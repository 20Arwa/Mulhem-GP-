from flask import current_app
from website import db
from models import Available_stories  # استيراد قاعدة البيانات وموديل Story
import json

# قائمة القصص
stories = [
    {
        "title": "ذات الرداء الأحمر (ليلى والذئب)", 
        "content": [
                    "كان يا ما كان، في قديم الزمان، فتاة صغيرة طيبة القلب تُدعى 'ذات الرداء الأحمر'، وذلك بسبب رداء أحمر جميل أهَدته لها جدتها، وكانت ترتديه دائمًا.في يوم من الأيام، قالت لها والدتها:\n'يا ابنتي العزيزة، جدتكِ مريضة وتعيش وحدها في الغابة. خذي لها هذه السلة التي تحتوي على كعك وعصير لتقويتها. تذكري ألا تخرجي عن الطريق، ولا تضيعي الوقت.'\nوعدت ذات الرداء الأحمر أمها بأنها ستكون حذرة، وانطلقت نحو الغابة. كان يومًا مشرقًا، والغابة تبدو هادئة وجميلة.",
                    "كانت ذات الرداء الأحمر تسير في الغابة، ظهر لها ذئب كبير بدا ودودًا.\n\nقال الذئب بمكر: 'إلى أين أنتِ ذاهبة يا صغيرة؟'\n ردت ذات الرداء الأحمر:'أنا ذاهبة إلى بيت جدتي المريضة لأعطيها بعض الطعام.'\nسألها الذئب: 'وأين تعيش جدتكِ؟'\nأجابته:'تحت ثلاثة أشجار بلوط كبيرة في الغابة.'\nفكر الذئب بخطة شريرة وقال: 'ما رأيكِ أن تجمعي بعض الزهور الجميلة لجدتكِ؟ ستفرح كثيرًا بها.'\n\nوافقت ذات الرداء الأحمر، وبدأت تقطف الزهور، مما جعلها تبتعد عن الطريق.",
                    "استغل الذئب فرصة انشغال الفتاة بالزهور وركض سريعًا إلى بيت الجدة. طرق الباب قائلاً بصوت ناعم: 'أنا ذات الرداء الأحمر، أحضرت لكِ كعكًا وعصيرًا.'\nردت الجدة من الداخل: 'ادخلي، الباب مفتوح.'\n\nدخل الذئب المنزل وانقض على الجدة وأكلها، ثم ارتدى ملابسها واستلقى في سريرها منتظرًا ذات الرداء الأحمر.\n\nعندما وصلت الفتاة إلى المنزل، لاحظت أن الباب مفتوح قليلاً وشعرت بالقلق. دخلت وقالت: 'صباح الخير يا جدتي!'",
                    "اقتربت ذات الرداء الأحمر من السرير ولاحظت أن 'جدتها' تبدو غريبة. فقالت:'ما أكبر أذنيكِ!' فأجاب الذئب: 'لكي أسمعكِ جيدًا.' \nثم قالت: 'ما أكبر عينيكِ!' فأجاب: 'لكي أراكِ جيدًا.'\nوأخيرًا قالت: 'ما أكبر فمكِ!' فرد الذئب: 'لكي آكلكِ!'\nقفز الذئب وابتلع الفتاة. ولكن لحسن الحظ، كان هناك صياد يمر قرب المنزل. دخل الصياد ورأى الذئب نائمًا، فشَق بطنه ووجد الجدة وذات الرداء الأحمر سالمتين.\nملأ الصياد بطن الذئب بالحجارة وأغلقه. عندما استيقظ الذئب حاول الهرب لكنه سقط ميتًا.\nشكرت ذات الرداء الأحمر وجدتها الصياد على شجاعته، وقالت الفتاة:'تعلمت درسًا. لن أخرج عن الطريق مرة أخرى.' ثم عادت إلى بيتها بأمان."], 
        "imgSrc":"images/ذات الرداءلأحمر.jpg", 
        "audioSrc": [
                    "audio/our_library/ذات الرداء الأحمر_1.mp3",
                    "audio/our_library/ذات الرداء الأحمر_2.mp3",
                    "audio/our_library/ذات الرداء الأحمر_3.mp3",
                    "audio/our_library/ذات الرداء الأحمر_4.mp3"
                    ]
    },
    # {"url": "/mulhem-main/reading.html", "image": "images/علاء الدين.jpeg", "alt": "علاء الدين", "title": "علاء الدين و المصباح السحري"},
    # {"url": "/mulhem-main/reading.html", "image": "images/جاك وحبة الفاصولياء.png", "alt": "جاك و حبة الفاصولياء", "title": "جاك وحبة الفاصولياء"},
    # {"url": "/mulhem-main/reading.html", "image": "images/نور و الالوان المفقودة.jpeg", "alt": "نور و الألوان المفقودة", "title": "نور والألوان المفقودة"},
    # {"url": "tryme.html", "image": "images/الفتى المخادع.jpeg", "alt": "الفتى المخادع", "title": "الفتى المخادع"},
    # {"url": "tryme.html", "image": "images/الأرنب المشاغب.png", "alt": "الأرنب المشاغب", "title": "الأرنب المشاغب باسل"},
    # {"url": "tryme.html", "image": "images/راكان وكنز الجد.jpeg", "alt": "راكان وكنز الجد", "title": "راكان وكنز الجد"},
    # {"url": "tryme.html", "image": "images/التمرة الضائعة.jpeg", "alt": "التمرة الضائعة", "title": "التمرة الضائعة"}
]
# دالة لإضافة القصص
def add_stories():
    with current_app.app_context():  # الوصول إلى سياق التطبيق
        for story in stories:
            # تحقق إذا كانت القصة موجودة بناءً على العنوان
            existing_story = Available_stories.query.filter_by(title=story['title']).first()
            if not existing_story:
                # إذا لم تكن موجودة، أضفها
                new_story = Available_stories(
                    title=stories['title'],
                    content=json.dumps(stories['content']),
                    type=stories['title'],
                    imgSrc=stories['imgSrc'],
                    audioSrc=json.dumps(stories['audioSrc'])
                )
                db.session.add(new_story)
        db.session.commit()
        print("تمت إضافة القصص إذا لم تكن موجودة.")

if __name__ == "__main__":
    add_stories()





    Voice Recorder: 
    // collect DOMs
const display = document.querySelector('.display-voice-record')
const controllerWrapper = document.querySelector('.controllers-voice-record')

const State = ['Initial', 'Record', 'Download']
let stateIndex = 0
let mediaRecorder, chunks = [], audioURL = ''

// mediaRecorder setup for audio
if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia){
    navigator.mediaDevices.getUserMedia({
        audio: true
    }).then(stream => {
        mediaRecorder = new MediaRecorder(stream)

        mediaRecorder.ondataavailable = (e) => {
            chunks.push(e.data)
        }
       

        mediaRecorder.onstop = async () => {
            const blob = new Blob(chunks, { type: 'audio/ogg; codecs=opus' });
            chunks = []; // إعادة تعيين chunks بعد إنشاء blob
            audioURL = window.URL.createObjectURL(blob);
        
            try {
                const formData = new FormData();
                formData.append('audio', blob, 'recorded_audio.ogg'); // رفع الصوت
        
                const response = await fetch('http://127.0.0.1:5000/save-recorded-audio', {
                    method: 'POST',
                    body: formData
                });
        
                if (!response.ok) {
                    throw new Error('فشل الاتصال بالخادم. حاول مرة أخرى.');
                }
        
                const result = await response.json();
                if (result.success) {
                    console.log('تم رفع الصوت بنجاح:', result.file_path);
                    document.querySelector('audio').setAttribute("src", `${result.file_path}?t=${new Date().getTime()}`); // تحديث المسار
                } else {
                    console.error('فشل رفع الصوت:', result.message);
                }
            } catch (error) {
                console.error('حدث خطأ أثناء رفع الصوت:', error);
            }
        };
        
        
    }).catch(error => {
        console.log('Following error has occured : ',error)
    })
}else{
    stateIndex = ''
    application(stateIndex)
}

const clearDisplay = () => {
    display.textContent = ''
}

const clearControls = () => {
    controllerWrapper.textContent = ''
}
const record = () => {
    if (stateIndex === 2) { // Check if we're in the "Download" state
        // Sweet Alert
        Swal.fire({
            title: 'إعادة تسجيل الصوت',
            text: 'هل أنت متأكد أنك تريد إعادة تسجيل الصوت؟ سيؤدي هذا إلى استبدال التسجيل الحالي.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'نعم، أعد التسجيل',
            cancelButtonText: 'إلغاء',
            reverseButtons: true, // Swaps the position of confirm and cancel buttons
        }).then((result) => {
            if (result.isConfirmed) {
                // Proceed with recording logic
                stateIndex = 1;
                mediaRecorder.start();
                application(stateIndex);
                console.log('User confirmed and recording started.');
            } else {
                console.log('User canceled.');
            }
        });
    } else {
        // If not in "Download" state, proceed directly
        stateIndex = 1;
        mediaRecorder.start();
        application(stateIndex);
    }
};


const stopRecording = () => {
    stateIndex = 2
    mediaRecorder.stop()
    application(stateIndex)
}

const downloadAudio = () => {
    const downloadLink = document.createElement('a')
    downloadLink.href = audioURL
    downloadLink.setAttribute('download', 'audio')
    downloadLink.click()
}

const addButton = (id, funString, text) => {
    const btn = document.createElement('button');
    btn.id = id;
    btn.setAttribute('onclick', funString);
    // إنشاء الأيقونة
    const icon = document.createElement('i');
    icon.className = 'fa-solid fa-microphone mic-icon'; // تعيين الفئات للأيقونة
    // إضافة الأيقونة أولاً
    btn.appendChild(icon);
    // إضافة النص بعد الأيقونة
    const textNode = document.createTextNode(text);
    btn.appendChild(textNode);
    // إضافة الزر إلى العنصر المطلوب
    controllerWrapper.append(btn);
};



const addMessage = (text) => {
    const msg = document.createElement('p')
    msg.textContent = text
    display.append(msg)
}

const addAudio = () => {
    const audio = document.createElement('audio')
    audio.controls = true
    audio.src = audioURL
    display.append(audio)
    
}

const application = (index) => {
    switch (State[index]) {
        case 'Initial':
            clearDisplay()
            clearControls()

            addButton('record', 'record()', 'سجل القصة بصوتك')
            break;

        case 'Record':
            clearDisplay()
            clearControls()

            addMessage('يتم التسجيل...')
            addButton('stop', 'stopRecording()', 'أوقف التسجيل')
            break

        case 'Download':
            clearControls()
            clearDisplay()

            addAudio()
            addButton('record', 'record()', 'سجل مرة أخرى')
            break
            
            default:
                clearControls()
                clearDisplay()
                
                addMessage('المتصفح الخاص بك لا يدعم هذه الخاصية')
                break;
            }
            
        }
        
        console.log('Current State Index:', stateIndex);
application(stateIndex)





// Copyright https://github.com/davidsproject/VRecorder




Profile
@auth.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    if request.method == 'POST':
        # Get Inputs
        first_name = request.form.get('f_name')
        last_name = request.form.get('l_name')
        age = request.form.get('age')
        gender = request.form.get('gender')
        email = request.form.get('email')
        password = request.form.get('password')

        user = User.query.filter_by(id=current_user.id).first()
        if not user:
            flash("User not found.", category='error')
            return redirect(url_for('auth.profile'))

        # تحديث البيانات الأخرى
        user.first_name = first_name
        user.last_name = last_name
        user.age = age
        user.gender = gender

        # إذا تم تحديث كلمة المرور
        if password and password != '***********':  # تأكد من أن المستخدم غير كلمة المرور
            user.password = generate_password_hash(password)

        # إذا تم تحديث الإيميل
        if user.email != email:
            # Start Email Verification
            otp_num = randint(1000, 9999)
            session['otp_num'] = otp_num
            session['otp_time'] = datetime.now()
            session['temp_user'] = {
                'f_name': first_name,
                'l_name': last_name,
                'age': age,
                'gender': gender,
                'email': email,
                'password': generate_password_hash(password) if password else user.password
            }

            # إعداد وإرسال الإيميل
            mail = Mail(current_app)
            msg = Message(subject='تطبيق ملهم', sender='mulhem2025gp@gmail.com', recipients=[email])
            msg.html = f'''
                <html>
                    <body style="text-align:center">
                        <h1>رمز التحقق</h1>
                        <p>رمز التحقق الخاص بك هو: <strong>{otp_num}</strong></p>
                    </body>
                </html>
            '''
            mail.send(msg)

            db.session.commit()  # حفظ التغييرات قبل التحقق من الإيميل
            flash("تم إرسال رمز التحقق إلى بريدك الإلكتروني. يرجى إدخال الرمز.", category='info')
            return redirect(url_for('auth.verify'))

        # حفظ التغييرات في قاعدة البيانات
        db.session.commit()
        flash("تم تحديث بيانات الحساب بنجاح!", category='success')
        return redirect(url_for('auth.profile'))

    return render_template('auth/profile.html', user=current_user)


@auth.route('/verify-update', methods=['GET', 'POST'])
@login_required
def verify_update():
    if request.method == 'POST':
        entered_otp = request.form.get('otp')
        if session.get('otp_num') == int(entered_otp):
            current_user.email = session.pop('temp_email')
            db.session.commit()
            flash("تم التحقق من الإيميل بنجاح.", "success")
            return redirect(url_for('auth.profile'))
        else:
            flash("رمز التحقق غير صحيح.", "error")
    return render_template('auth/verify.html')